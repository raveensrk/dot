extends systemverilog verilog

snippet constructor "Create a constructor for this class."

	// Constructor
	function new(string name, uvm_component p = null);
		super.new(name,p);
		${1:code} = new("${1:code}",this);
	endfunction

endsnippet

snippet class "Create a class"
class ${1:name} extends uvm_component;
	${2}
endclass // ${1:name}
endsnippet

snippet task_run "Create a run phase task"
task run_phase(uvm_phase phase);
	
endtask
endsnippet

snippet uvm_info "uvm_info snippet"
	\`uvm_info(get_name(), $sformatf("$1 = 0x%08h, %0d", $1, $1), UVM_NONE);
endsnippet

snippet uvm_error "uvm_error snippet"
	\`uvm_error(get_name(), $sformatf("receiving %4d", ${2:val}));
endsnippet

snippet connect_phase "Creates a connect phase function"
	function void connect_phase(uvm_phase phase);
		${1}
	endfunction
endsnippet
	
snippet initial "Create initial block"
    initial begin
        $1
    end
endsnippet

snippet always "Create always block"
    always begin
        $1
    end
endsnippet

snippet display "$display statement"
$display("$1 = %0d", $1);
endsnippet

snippet uvm_config_db_get "UVM Config db"
	uvm_config_db#($1)::get(this, "$2", $2)
endsnippet

snippet uvm_config_db "UVM config db template"
uvm_config_db#(virtual dut_if)::get(this, "vif", vif)
endsnippet

snippet build_phase "UVM build phase template"
function void build_phase(uvm_phase phase);
	string inst_name;
	super.build_phase(phase);
endfunction
endsnippet

snippet drive_item "UVM drive item template"
task drive_item(input simple_item item);
     $1     
endtask: drive_item
endsnippet

snippet uvm_fatal "UVM fatal template"
\`uvm_fatal("$1", "$2");
endsnippet

snippet run_phase "UVM run phase template"
task run_phase(uvm_phase phase);
     forever begin
     end
endtask
endsnippet
