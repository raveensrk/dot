#+title: Install Everything
#+auto_tangle: t
#+startup: overview

* Introduction
This script will install everything for my ubuntu wsl setup
* Bash headers
#+name bash_header
#+begin_src bash :tangle yes
#!/bin/bash
set -e
set -x
#+end_src
* Create directories
#+name: create_directories
#+begin_src bash :tangle sync.bash
[ ! -d $HOME/.tmp        ] && mkdir "$HOME/.tmp"
[ ! -d $HOME/.vim        ] && mkdir "$HOME/.vim"
[ ! -d $HOME/.vim/undo   ] && mkdir "$HOME/.vim/undo"
[ ! -d $HOME/.vim/backup ] && mkdir "$HOME/.vim/backup"
[ ! -d $HOME/.vim/swap   ] && mkdir "$HOME/.vim/swap"
[ -d "$HOME/tmp" ] || mkdir "$HOME/tmp"
[ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"
[ -d "$HOME/.status" ] || mkdir -p "$HOME/.status"
bash add_sources.bash "[ -f ~/.bash_aliases ] && source ~/.bash_aliases" "$HOME/.bashrc"
bash add_sources.bash "[ -f ~/.bashrc ] && source ~/.bashrc" "$HOME/.bash_login"
stow -R stow -t "$HOME" --no-folding

# Not sure if this is required anymore
# chmod 644 "$HOME/.ssh/config"
#+end_src

#+begin_src bash :tangle yes :noweb yes
<<create_directories>>
#+end_src

#+begin_src bash :tangle uninstall_everything.bash
stow -D stow -t "$$HOME" --no-folding
#+end_src

* Basic programs install for ubuntu wsl

Check if the os is ubuntu
#+begin_src bash :tangle yes
is_ubuntu=$(cat /etc/lsb-release | grep DISTRIB_ID | cut -d = -f 2)
echo is_ubuntu = $is_ubuntu
#+end_src

Updates and Apt installs
#+begin_src bash :tangle yes

if [ "$is_ubuntu" = "Ubuntu" ]; then
    sudo apt update -y
    sudo apt upgrade -y
    sudo apt install -y  \
        flatpak \
        snap \
        snapd \
        autoconf \
        automake \
        cscope \
        curl \
        emacs \
        ffmpeg \
        ffmpegthumbnailer \
        firefox \
        git \
        gnome-software \
        gnuplot \
        htop \
        imagemagick \
        kdialog \
        kdiff3 \
        libssl-dev \
        mediainfo \
        mlocate \
        mpv \
        neofetch \
        newsboat \
        npm \
        obs-studio \
        octave \
        pandoc \
        pkg-config \
        python3 \
        python3-pip \
        qrencode \
        ranger \
        ripgrep \
        rsync \
        ruby \
        shellcheck \
        stow \
        tldr \
        urlview \
        vim \
        vim-gtk \
        x11-xserver-utils \
        yank \
        xclip


    sudo apt install gnome-software-plugin-flatpak
    flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    # TODO flatpak not working in ubuntu wsl
    # flatpak install flathub com.spotify.Client
    # flatpak install flathub org.mozilla.firefox
fi
#+end_src

* TODO Basic programs install for fedora
#+begin_src bash :tangle ./installer_scripts/update_fedora.bash
sudo dnf install "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm" "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"
sudo dnf install -y \
    autoconf \
    automake \
    bat \
    curl \
    ffmpeg \
    ffmpegthumbnailer \
    gnuplot \
    htop \
    ImageMagick \
    kdialog \
    kdiff3 \
    mediainfo \
    plocate \
    mpv \
    neofetch \
    newsboat \
    obs-studio \
    openssl-devel \
    pandoc \
    pkg-config \
    python \
    python3 \
    python3-pip \
    ranger \
    ripgrep \
    ruby \
    ShellCheck \
    stow \
    tldr \
    urlview \
    vim \
    vim-X11 \
    yank \
    rsync \
    jq \
    gimp \
    emacs \
    ncurses-devel-6.2-9.20210508.fc36.x86_64 \
    libX11-devel-1.7.3.1-2.fc36.x86_64  \
    libXt-devel \
    exa \
    cscope \
    gnome-software \
    git \
    hg \
    octave \
    qrencode \
    npm \
    xset \
    google-chrome \


    sudo dnf install touchegg -y
# You may also need to manually start the service
sudo systemctl start touchegg
sudo systemctl enable touchegg
sudo dnf groupinstall i3-desktop-environment
npm install --global prettier @prettier/plugin-lua @prettier/plugin-php prettier-plugin-solidity prettier-plugin-svelte prettier-plugin-toml
#+end_src
* Basic programs install for macos
#+name: update_macos
#+begin_src bash :tangle ./installer_scripts/update_macos.bash
if [ "$is_linux" = "Darwin" ]; then
    if ! command -v brew; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    brew install \
        autoconf \
        automake \
        bat \
        curl \
        ffmpeg \
        ffmpegthumbnailer \
        gnuplot \
        htop \
        imagemagick \
        dialog \
        mediainfo \
        mpv \
        neofetch \
        newsboat \
        pandoc \
        pkg-config \
        python \
        ranger \
        ripgrep \
        ruby \
        shellcheck \
        stow \
        tldr \
        urlview \
        vim \
        yank \
        wget \
        lesspipe \
        rsync \
        grep \
        bfg \
        jq \
        gimp \
        emacs \
        cscope \
        w3m \
        mactex \
        klavaro

fi
#+end_src

#+begin_src bash :tangle yes :noweb yes
<<update_macos>>
#+end_src

* Stowing for macos

#+begin_src bash :tangle yes
if [ "$is_linux" = "Darwin" ]; then
    stow -R stow_macos -t "$HOME" --no-folding
    defaults write com.apple.desktopservices DSDontWriteNetworkStores true
fi
#+end_src

To unstow

#+begin_src bash :tangle no
stow -D stow_macos -t "$HOME" --no-folding
#+end_src
** Add to sync.bash
#+begin_src bash :tangle sync.bash :noweb yes
<<update_macos>>
#+end_src

* Stow for WSL 2 Specific

To get gui working in windows 10 and wsl 2 we need this script but not requried for windows 11

#+begin_src bash :tangle no
stow -R stow_wsl2_scripts -t "$HOME" --no-folding
#+end_src

To unstow

#+begin_src bash :tangle no
stow -D stow_wsl2_scripts -t "$HOME" --no-folding
#+end_src

* Stowing for linux

#+begin_src bash :tangle yes

is_linux=$(uname -a | cut -d ' ' -f 1)

if [ "$is_linux" = "Linux" ]; then
    stow -R stow_linux -t "$HOME" --no-folding
else
    echo Skipping linux stow command since this system is not linux...
fi
#+end_src

To unstow

#+begin_src bash :tangle no
stow -D stow_linux -t "$HOME" --no-folding
#+end_src

* Install doom emacs
#+name: stow_doom_emacs
#+begin_src bash :tangle sync.bash
if [ "$is_ubuntu" = "Ubuntu" ]; then
    stow -R doom_emacs -t "$HOME" --no-folding
    if [ ! -e ~/.emacs.d/bin/doom ]; then
        git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
        ~/.emacs.d/bin/doom install
        ~/.emacs.d/bin/doom sync
    else
        echo Doom exists...
    fi
fi
#+end_src

* Install fzf if it does not exist
#+begin_src bash :tangle yes
if [ ! -e ~/.fzf/bin/fzf ]; then
    git clone --depth 1 "git@github.com:junegunn/fzf.git" ~/.fzf
fi
"$HOME/.fzf/install" --all
#+end_src

* Install colemak
#+name: install_colemak
#+begin_src bash :tangle ./installer_scripts/install_colemak.bash
if [ "$is_linux" = "Linux" ]; then
    # https://colemak.com/Unix


    pushd ~/.tmp
    wget -nc "https://colemak.com/pub/unix/colemak-1.0.tar.gz"
    tar xvf colemak-1.0.tar.gz
    pushd colemak-1.0
    setxkbmap us; xmodmap xmodmap/xmodmap.colemak && xset r 66
    setxkbmap us -variant colemak
    popd
    popd
fi
#+end_src

#+begin_src bash :tangle yes :noweb yes
<<install_colemak>>
#+end_src

** Uninstall colemak
#+begin_src bash :tangle ./installer_scripts/uninstall_colemak.bash
setxkbmap us; xmodmap xmodmap/xmodmap.colemak && xset r 66
#+end_src

* Install tpm - tmux plugins manager
#+begin_src bash :tangle yes
if [ ! -e $HOME/.tmux/plugins/tpm ]; then
    git clone "git@github.com:tmux-plugins/tpm.git" "$HOME/.tmux/plugins/tpm"
else
    echo TPM present...
fi
#+end_src


To install the plugins in Tmux press =<prefix>I=

To uninstall

#+begin_src bash :tangle no
rm -vrf "$HOME/.tmux/plugins/tpm"
#+end_src
* Install Yt-Dlp

#+begin_src bash :tangle yes
curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o ~/.local/bin/yt-dlp
chmod a+rx ~/.local/bin/yt-dlp
#+end_src
* Install vim plugins
#+begin_src bash :tangle yes
vim -c "PlugInstall | PlugClean | qa"
#+end_src
* Install Bash completions

#+begin_src bash :tangle yes
pushd ~/.tmp
wget -nc https://github.com/scop/bash-completion/releases/download/2.11/bash-completion-2.11.tar.xz
tar xf bash-completion-2.11.tar.xz
pushd "bash-completion-2.11"
./configure --prefix="$HOME/.local"
make
make install
popd
popd

bash add_sources.bash "[ -f ~/.local/etc/profile.d/bash_completion.sh ] && source ~/.local/etc/profile.d/bash_completion.sh"  "$HOME/.bashrc"



#+end_src

To uninstall use the following commands

#+begin_src bash :tangle ./installer_scripts/uninstall_bash_completion.bash
cd stow_vim_plugins/.packages/bash-completion-2.11
make uninstall
cd ..
rm -rf bash-completion-2.11
rm bash-completion-2.11.tar.xz
#+end_src

* Install packages from source
#+begin_src bash :tangle ./installer_scripts/download_source_packages_for_building.bash
wget -nc https://github.com/universal-ctags/ctags/archive/refs/heads/master.zip -O ctags.zip
wget -nc https://github.com/facebook/PathPicker/archive/refs/heads/main.zip -O PathPicker.zip
wget -nc https://ftp.gnu.org/gnu/texinfo/texinfo-6.8.tar.gz
wget -nc https://ftp.nluug.nl/pub/vim/unix/vim-8.2.tar.bz2
wget -nc https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz
wget -nc https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz
wget -nc https://github.com/sharkdp/fd/releases/download/v8.3.0/fd-v8.3.0-i686-unknown-linux-musl.tar.gz
wget -nc https://github.com/sharkdp/fd/releases/download/v8.4.0/fd-v8.4.0-x86_64-apple-darwin.tar.gz
wget -nc https://github.com/tmux/tmux/releases/download/2.6/tmux-2.6.tar.gz
wget -nc https://ranger.github.io/ranger-stable.tar.gz
wget -nc https://github.com/scop/bash-completion/releases/download/2.11/bash-completion-2.11.tar.xz
wget -nc https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep-13.0.0-x86_64-unknown-linux-musl.tar.gz
#+end_src

** Install xclip from source
#+begin_src bash :tangle ./installer_scripts/install_xclip.bash
pushd ~/.tmp
wget -nc "https://github.com/astrand/xclip/archive/refs/tags/0.13.tar.gz"
tar xvf 0.13.tar.gz
pushd xclip-0.13
autoreconf
./configure --prefix=$HOME/.local
make
make install
popd
popd
#+end_src
** Install vim from flathub
#+begin_src bash :tangle ./installer_scripts/install_vim_from_flathub.bash
pushd ~/.tmp
wget -nc "https://dl.flathub.org/repo/appstream/org.vim.Vim.flatpakref"
flatpak install --user org.vim.Vim.flatpakref
popd
#+end_src
** Install vim from source
#+begin_src bash :tangle ./installer_scripts/install_vim_from_source.bash
pushd ~/.tmp
wget -nc https://ftp.nluug.nl/pub/vim/unix/vim-8.2.tar.bz2
tar xf vim-8.2.tar.bz2
pushd vim82 || exit 2
./configure --prefix="$HOME/.local" # defaults to /usr/local
make
make install
popd || exit 2
popd
#+end_src
** Install git from source
#+begin_src bash :tangle ./installer_scripts/install_git_from_source.bash
pushd ~/.tmp
wget -nc https://www.kernel.org/pub/software/scm/git/git-2.38.1.tar.gz
tar xf git-2.38.1.tar.gz
pushd git-2.38.1
./configure --prefix=$$HOME/.local
make -j
make install
popd
popd
#+end_src
** Install ctags from source

#+begin_src bash :tangle ./installer_scripts/install_ctags_from_source.bash
pushd ~/.tmp
wget -nc https://github.com/universal-ctags/ctags/archive/refs/heads/master.zip -O ctags.zip
unzip -qo ctags.zip
pushd ctags-master
export ACLOCAL_PATH="/usr/share/aclocal"
./autogen.sh
./configure --prefix="$HOME/.local"
make
make install
popd
popd
#+end_src
** Install pkg-config from source

#+begin_src bash :tangle ./installer_scripts/install_pkg-config_from_source.bash
pushd ~/.tmp
tar xf pkg-config-0.29.2.tar.gz
pushd ./pkg-config-0.29.2
./configure --prefix="$HOME/.local" --with-internal-glib
make
make install
popd
popd
#+end_src

** Install TMUX from source

#+begin_src bash :tangle installer_scripts/install_tmux_from_source.bash
pushd ~/.tmp
wget -nc https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz
tar xf libevent-2.1.12-stable.tar.gz
pushd libevent-2.1.12-stable
./configure --prefix=$HOME/.local --enable-shared
make
make install
popd

wget -nc https://github.com/tmux/tmux/releases/download/3.3a/tmux-3.3a.tar.gz
tar xf tmux-3.3a.tar.gz
pushd tmux-3.3a
PKG_CONFIG_PATH=$$HOME/.local/lib/pkgconfig ./configure --prefix=$HOME/.local && make
make install
popd
#+end_src
** Install emacs from source
#+begin_src bash :tangle ./installer_scripts/install_emacs_from_source.bash
cd ~/.tmp
wget -nc https://mirror.hostiran.ir/gnu/gnu/emacs/emacs-28.1.tar.gz
tar -xf emacs-28.1.tar.gz
cd emacs-28.1
./configure --with-x-toolkit=no --prefix=$HOME/.local
make
make install
#+end_src
** Install Stow from source

#+begin_src bash :tangle ./installer_scripts/install_stow_from_source.bash
STOW_VERSION=stow-2.2.0
cd ~/.tmp
wget -nc https://ftp.gnu.org/gnu/stow/${STOW_VERSION}.tar.gz
tar xf ${STOW_VERSION}.tar.gz
cd ~/.tmp/${STOW_VERSION}
./configure --prefix=$$HOME/.local
make
make install
#+end_src
** Install Bash from source
#+begin_src bash :tangle ./installer_scripts/install_bash_from_source.bash
cd ~/.tmp
wget -nc https://ftp.gnu.org/gnu/bash/bash-5.1.tar.gz
tar xf bash-5.1.tar.gz
cd bash-5.1
./configure --prefix=$HOME/.local
make
make install
#+end_src

* [[id:0b1b9c18-fb50-4ad2-a552-bf29b7ded02a][Doom Emacs Configs]]
* [[file:../]]
