" if $SHLVL > 4
" 	if $VIM != ""
" 		echo "Nested vim detected. Won't Open nested vim."
" 		quit
" 	endif
" endif

source $VIMRUNTIME/vimrc_example.vim
set runtimepath^=~/dot/config/vim
set runtimepath+=~/dot/config/vim/after
let g:pathogen_blacklist = ['Damian-Conway-s-Vim-Setup']
if ($is_linux != "Darwin") 
    let g:pathogen_blacklist += ['vim-ai.git']
endif

execute pathogen#infect()
syntax on
filetype plugin indent on

" BASICS {{{
set autoread
set nocompatible
" set hidden
set backspace=indent,eol,start
set encoding=utf-8
set noerrorbells
set novb t_vb=
" set vb t_vb=[?5h$<100>[?5l

" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
" let &t_SI = "\e[6 q"
" let &t_EI = "\e[2 q"
" }}}
" NAVIGATION {{{
" set splitbelow splitright
" }}}
" GRAMMAR AND SEARCHING {{{
" set spell spelllang=en_us
" set textwidth=80
set isk+=-
set ignorecase
set smartcase
set dictionary="/usr/share/dict/words"
" }}}
" TABBING AND INDENT {{{
set tabstop=4 softtabstop=4
set shiftwidth=4
set noexpandtab
set autoindent
set smartindent
set smarttab
" set listchars=nbsp:_,tab:>-,trail:~,extends:>,precedes:<,eol:$
" set list
" }}}
" FOLDING AND WRAPPING {{{
set foldmethod=marker
set foldenable
" }}}
" {{{ NUMBERING
set number 
" set relativenumber
" }}}
" {{{ INTERFACE
set pumheight=10
set nowrap
set nolinebreak
set hlsearch
set incsearch
set ruler
" set wildmode=list:longest,full
set wildmenu
set wildignore=#*,./,
set wildignorecase
set wildoptions=pum
" These 2 settings will force the cursor line to always be at the center of
" the screen
set scrolloff=999
set sidescrolloff=1
set sidescroll=1
set scrollopt=ver,jump,hor
"  }}}
" {{{ BACKUPS AND UNDO
if ! isdirectory(expand("~/.vim/undo"))   | call mkdir(expand("~/.vim/undo"),   'p') | endif
if ! isdirectory(expand("~/.vim/backup")) | call mkdir(expand("~/.vim/backup"), 'p') | endif
set undodir=$HOME/.vim/undo
set backupdir=$HOME/.vim/backup
set noswapfile
set backup
set writebackup
set undofile
" }}}
" {{{ NETRW
let g:netrw_liststyle = 1
"}}}
" â†“ TESTING â†“


set previewpopup=height:10,width:60
set browsedir="buffer"
set title
set titlestring=%f
set titleold="Terminal"
set helpheight=10
function! Bookmarks()
    setlocal errorformat+=%f%.%#
    lexp  eval('g:netrw_bookmarklist')
    lopen 5
endfunction
" set complete+=t
set wildoptions=pum
set completeopt+=popup,menu,preview
set makeef=/tmp/errorfile
" set foldclose="all"
set showfulltag
set maxcombine=6
set verbosefile=/tmp/verbosefile
set whichwrap+=<,>,[,]
set equalalways
" set winfixheight
" set winfixwidth
set isfname-==
set isfname-=,

packadd cfilter
set switchbuf=uselast
autocmd! BufEnter *.log setlocal readonly 
" autocmd! BufEnter *.log setlocal nowrap
" autocmd QuickFixCmdPost make set wrap
" autocmd QuickFixCmdPost make set nowinfixheight nowinfixwidth
set viminfo+=r/opt/homebrew/
set viminfo+=r~/.vim/plugged
" set exrc secure
let mapleader = " "

" set path+=**;~/ " This is awesome but find search takes too long
set tags+=./tags,../tags
" set path+=*
" set path+=.*
" set path+=./;~/
set path+=~/script
set path+=~/dot/**
" autocmd! BufWritePre
" autocmd BufWritePre *.txt s/ \+$//e
" let g:ft_man_folding_enable = 1
" autocmd FileType man setlocal foldmethod=indent foldenable
let g:ft_man_no_sect_fallback = 1
set keywordprg=:Man
set hidden
let g:netrw_hide=1

if filereadable(expand('~/script/custom/custom.vim'))
    execute 'source ' . expand('~/script/custom/custom.vim')
endif
" set gdefault
"

command! Format :norm mmggVGgq`m
set showmode
set showcmd
set shortmess+=I
set nu
" set foldlevelstart=99
" func! Fix() abort
" 	let status="â”†%n"
" 	if &winfixbuf
" 		let status.="â”†%#Directory#FIX%*"
" 	else
" 		let status.="â”†BUF"
" 	endif
" 	let status.="â”†%M"
" 	let status.="â”†%R"
" 	let status.="â”†%f"
" 	let status.="â”†%S"
" 	let status.="â”†%="
" 	let status.="â”†%H"
" 	let status.="â”†%W"
" 	let status.="â”†%Y"
" 	let status.="â”†%q"
" 	let status.="â”†%k"
" 	let status.="â”†%p%%"
" 	" let status.="%b"
" 	" let status.="â”†"
" 	let status.="â”†%l,%v"
" 	let status.="â”†"
" 	" let status.="%L"
" 	" let status.="â”†"
" 	return status
" endfunc

set showcmd
set showcmdloc=statusline
" set statusline=%{%Fix()%}
" set nowrap
set autochdir
let g:deoplete#enable_at_startup = 1

" Repeat previous command
" nmap <leader>\ :<UP><CR>

set mouse=
set guifont=Monaco:h24
" autocmd QuickFixCmdPost * execute 'norm G'
command! Test Dispatch pytest %
command! Run Dispatch python %
